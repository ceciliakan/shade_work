<?xml version="1.0" encoding="ISO-8859-1"?>
<pipeline>
<vertex>
<![CDATA[
#version 400 

uniform mat4 mvMatrix;
uniform mat4 pMatrix;
uniform mat3 normalMatrix; //mv matrix without translation

uniform vec4 lightPosition_camSpace; //light Position in camera space

in vec4 vertex_worldSpace;
in vec3 normal_worldSpace;
in vec2 textureCoordinate_input;

out data
{
  vec4 position_camSpace;
  vec3 normal_camSpace;
  vec2 textureCoordinate;
  vec4 color;
}vertexIn;

//Vertex shader compute the vectors per vertex
void main(void)
{
  //Put the vertex in the correct coordinate system by applying the model view matrix
  vec4 vertex_camSpace = mvMatrix*vertex_worldSpace; 
  vertexIn.position_camSpace = vertex_camSpace;
  
  //Apply the model-view transformation to the normal (only rotation, no translation)
  //Normals put in the camera space
  vertexIn.normal_camSpace = normalize(normalMatrix*normal_worldSpace);
  
  //Color chosen as red
  vertexIn.color = vec4(1.0, 0.0, 0.0, 1.0);
  
  //Texture coordinate
  vertexIn.textureCoordinate = textureCoordinate_input;
  
  gl_Position = pMatrix * vertex_camSpace;
}
]]>
</vertex>
<geom>
<![CDATA[
#version 400 

layout(triangles) in;
layout(triangle_strip, max_vertices = 3) out;

uniform mat4 mvMatrix;
uniform mat4 pMatrix;
uniform mat3 normalMatrix; //mv matrix without translation

uniform vec4 lightPosition_camSpace; //light Position in camera space

in data
{
  vec4 position_camSpace;
  vec3 normal_camSpace;
  vec2 textureCoordinate;
  vec4 color;
}vertexIn[3];

out fragmentData
{
  vec4 position_camSpace;
  vec3 normal_camSpace;
  vec2 textureCoordinate;
  vec4 color;
} frag;

void main() {
  for (int i = 0; i < 3; i++) { // You used triangles, so it's always 3
    gl_Position = gl_in[i].gl_Position;
    frag.position_camSpace = vertexIn[i].position_camSpace;
    frag.normal_camSpace = vertexIn[i].normal_camSpace;
    frag.textureCoordinate = vertexIn[i].textureCoordinate;
    frag.color = vertexIn[i].color;
	EmitVertex();
  }
  EndPrimitive();
 }
]]>
</geom>
<frag>
<![CDATA[
#version 400
uniform vec4 ambient;
uniform vec4 diffuse;
uniform vec4 specular;
uniform float shininess;

uniform vec4 lightPosition_camSpace; //light Position in camera space

in fragmentData
{
  vec4 position_camSpace;
  vec3 normal_camSpace;
  vec2 textureCoordinate;
  vec4 color;
} frag;

out vec4 fragColor; 

uniform sampler2D tiles; //Select image file using GUI to set as texture
uniform sampler2D bumpsMap; //Select image file using GUI to use for bump mapping

//Fragment shader computes the final color
void main(void)
{

  //*Bump mapping */
  //Extract normal (vector c [-1, 1]) from RGB values (values c [0, 1]) of normal map image
  vec3 norm_bumps = normalize(2.0 * vec3(texture(bumpsMap, frag.textureCoordinate)) - 1.0);
  /**/
    
   /***Code for Phong Shading***/
  vec3 normal_illum = norm_bumps; //frag.normal_camSpace; //
  float PI = 3.14159265358979;
  
  vec3 lightPos_camSpace = vec3(lightPosition_camSpace.xyz);

  // Find normal vector of incident light on object in camera space
  vec3 norm_incidentLight = normalize(lightPos_camSpace - vec3(frag.position_camSpace));

  // Find normal vector of reflected light in camera space
  vec3 norm_reflectLight = normalize(reflect(norm_incidentLight, normal_illum));

  vec3 norm_viewer = normalize(vec3(frag.position_camSpace));

  // Phong Illumination Model
  // Using normal from normal map for illumination instead of actual fragment surface normal
  float spec_reflect_coeff = 10.0;
  float spec_reflect_exp = shininess;
  float diffuse_reflect_coeff = 0.5;

  float constant = 4.0 * PI * pow(distance(lightPos_camSpace, vec3(frag.position_camSpace)), 2.0);
 
  float dot_diff_refl = max(dot(normal_illum, norm_incidentLight), 0.1); // not using 0 for colour
  float diff_refl = diffuse_reflect_coeff * dot_diff_refl / constant;
  float diff_refl_co = (1.0 - 0.1) * (diff_refl - 0.1 / constant) / ((diffuse_reflect_coeff - 0.1) / constant);
  
  float dot_spec_refl = max(dot(norm_reflectLight, norm_viewer), 0.1);
  float spec_refl = spec_reflect_coeff * pow(dot_spec_refl, spec_reflect_exp) / constant;
  float spec_refl_co = 0.9*(spec_refl - spec_reflect_coeff*pow(0.1, spec_reflect_exp)/constant) / ( (spec_reflect_coeff - 1.0)*pow(1.0, spec_reflect_exp)/constant );

  //Set texture
  vec4 fragColorTiles = texture(tiles, frag.textureCoordinate);

  vec4 lighting = fragColorTiles + diff_refl_co * vec4(1.0, 1.0, 1.0, 1.0) + spec_refl_co * vec4(1.0, 1.0, 1.0, 1.0);

  fragColor = lighting * fragColorTiles;

}
]]>
</frag>
<R2TVert>
<![CDATA[
#version 400

uniform mat4 mvMatrix;
uniform mat4 pMatrix;

in vec4 vertex_worldSpace;
in vec2 textureCoordinate_input;

out vec2 varyingTextureCoordinate;

//Vertex shader compute the vectors per vertex
void main(void)
{
  //Put the vertex in the correct coordinate system by applying the model view matrix
  vec4 vertex_camSpace = mvMatrix*vertex_worldSpace;

  varyingTextureCoordinate = textureCoordinate_input;
  gl_Position = pMatrix * vertex_camSpace;
}
]]>
</R2TVert>
<R2TFrag>
<![CDATA[
#version 400

uniform sampler2D textureRendered;

in vec2 varyingTextureCoordinate;

out vec4 fragColor;

void main(void)
{
  //Render the texture on a quad
  fragColor = texture2D(textureRendered, varyingTextureCoordinate.st);
}
]]>
</R2TFrag>
</pipeline>
